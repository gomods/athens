replicaCount: 1
image:
  registry: docker.io
  repository: gomods/athens
  tag: v0.11.0

  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent


livenessProbe:
  failureThreshold: 3
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

## Server Deployment Strategy type
# strategy:
#   type: Recreate

service:
  ## Additional annotations to apply to the service
  annotations: {}
  ## Port as exposed by the service
  servicePort: 80
  ## Type of service; valid values are "ClusterIP", "LoadBalancer", and
  ## "NodePort". "ClusterIP" is sufficient in the case when the Proxy will be used
  ## from within the cluster. To expose externally, consider a "NodePort" or "LoadBalancer" service.
  type: ClusterIP
  ## Further configuration if service is of type "NodePort"
  nodePort:
    ## Available port in allowable range (e.g. 30000 - 32767 on minikube)
    port: 30080

ingress:
  enabled: false
  # Provide key/value annotations
  annotations:
  # Provide an array of values for the ingress host mapping
  hosts:
  # Provide a base64 encoded cert for TLS use
  tls:

storage:
  type: disk
  disk:
    storageRoot: "/var/lib/athens"
    persistence:
      ## Note if you use disk.persistence.enabled, replicaCount should be set to 1 unless your access mode is ReadWriteMany
      ## and strategy type must be Recreate
      enabled: false
      accessMode: ReadWriteOnce
      size: 4Gi
  mongo:
    # you must set this on the command line when you run 'helm install'
    # for example, you need to run 'helm install --set storage.mongo.url=myurl ...'
    url: "SET THIS ON THE COMMAND LINE"
  s3:
    # you must set s3 bucket and region when running 'helm install'
    region: ""
    bucket: ""
    useDefaultConfiguration: true
  minio:
    # All these variables needs to be set when configuring athens to run with minio backend
    endpoint: ""
    accessKey: ""
    secretKey: ""
    bucket: ""
  gcp:
  # For more information, see:
  # https://docs.gomods.io/install/install-on-kubernetes/#google-cloud-storage
    # you must set gcp projectID and bucket when running 'helm install'
    projectID: ""
    bucket: ""
    # set serviceAccount to a key which has read/write access to the GCS bucket.
    # If you are running Athens inside GCP, you will most likely not need this
    # as GCP figures out internal authentication between products for you.
    serviceAccount: ""

# Extra environment variables to be passed
# You can add any new ones at the bottom
configEnvVars: {}

# Extra annotations to be added to the athens pods
annotations: {}

# HTTP basic auth
basicAuth:
  enabled: false
  secretName: athens-proxy-basic-auth
  passwordSecretKey: password
  usernameSecretKey: username

netrc:
  # if enabled, it expects to find the content of a valid .netrc file imported as a secret named netrcsecret
  enabled: false
  existingSecret: netrcsecret

# gitconfig section provides a way to inject git config file to make athens able to fetch modules from private git repos.
gitconfig:
  # By default, gitconfig is disabled.
  enabled: false
  # Name of the kubernetes secret (in the same namespace as athens-proxy) that contains git config.
  secretName: athens-proxy-gitconfig
  # Key in the kubernetes secret that contains git config data.
  secretKey: gitconfig

upstreamProxy:
  # This is where you can set the URL for the upstream module repository.
  # If 'enabled' is set to true, Athens will try to download modules from the upstream when it doesn't find them in its own storage.
  # Here's a non-exhaustive list of options you can set here:
  #
  # - https://gocenter.io
  # - https://proxy.golang.org
  # - another Athens server
  enabled: false
  url: "https://gocenter.io"

jaeger:
  ## Type of service; valid values are "ClusterIP", "LoadBalancer", and "NodePort".
  type: ClusterIP
  image:
    repository: jaegertracing/all-in-one
    tag: latest
  enabled: true
  # you must set this on the command line when you run 'helm install'
  # for example, you need to run 'helm install --set jaeger.url=myurl ...'
  url: "SET THIS ON THE COMMAND LINE"

sshGitServers: {}
  ## Private git servers over ssh
  ## to enable uncomment lines with single hash below
  ## hostname of the git server
  # - host: git.example.com
    ## ssh username
  #  user: git
    ## ssh private key for the user
  #  privateKey: |
  #    -----BEGIN RSA PRIVATE KEY-----
  #    -----END RSA PRIVATE KEY-----
    ## ssh port
  #  port: 22

goGetWorkers: 3

serviceAccount:
  create: true
  annotations: {}

nodeSelector: {}

tolerations: []

affinity: {}

resources: {}
#  limits:
#    cpu: 100m
#    memory: 64Mi
#  requests:
#    cpu: 100m
#    memory: 64Mi
